int ustc_Find_Circles_By_Difference(Mat colorImg, int min_radius,int max_radius,int min_center_dist,int min_radius_dist,int max_circle_diff,int* x,int* y,int* radius,int* circle_cnt,int max_circle)
{
   if (NULL == colorImg.data)
	{
		cout << "image is NULL." << endl;
		return -1;
	}

   int width = colorImg.cols;
   int height = colorImg.rows;
   Mat grayImg(height, width, CV_8UC1);
   int x_r[10000] = { 0 };//三个通道分别记录
   int y_r[10000] = { 0 };
   int r_r[10000] = { 0 };
   int totaldiff_r[10000] = { 0 };
   int x_g[10000] = { 0 };
   int y_g[10000] = { 0 };
   int r_g[10000] = { 0 };
   int totaldiff_g[10000] = { 0 };
   int x_b[10000] = { 0 };
   int y_b[10000] = { 0 };
   int r_b[10000] = { 0 };
   int totaldiff_b[10000] = { 0 };
   int i_r = 0;
   int i_g = 0;
   int i_b = 0;
   int angle_set = 359;
 
   float udf_sin[361] = { 0, 0.017452, 0.034899, 0.052336, 0.069756, 0.087156, 0.10453, \
	   0.12187, 0.13917, 0.15643, 0.17365, 0.19081, 0.20791, 0.22495, 0.24192, 0.25882, \
	   0.27564, 0.29237, 0.30902, 0.32557, 0.34202, 0.35837, 0.37461, 0.39073, 0.40674, \
	   0.42262, 0.43837, 0.45399, 0.46947, 0.48481, 0.5, 0.51504, 0.52992, 0.54464, 0.55919, \
	   0.57358, 0.58779, 0.60182, 0.61566, 0.62932, 0.64279, 0.65606, 0.66913, 0.682, 0.69466, \
	   0.70711, 0.71934, 0.73135, 0.74314, 0.75471, 0.76604, 0.77715, 0.78801, 0.79864, 0.80902, \
	   0.81915, 0.82904, 0.83867, 0.84805, 0.85717, 0.86603, 0.87462, 0.88295, 0.89101, 0.89879, 0.90631, \
	   0.91355, 0.9205, 0.92718, 0.93358, 0.93969, 0.94552, 0.95106, 0.9563, 0.96126, 0.96593, 0.9703, \
	   0.97437, 0.97815, 0.98163, 0.98481, 0.98769, 0.99027, 0.99255, 0.99452, 0.99619, 0.99756, 0.99863, \
	   0.99939, 0.99985, 1, 0.99985, 0.99939, 0.99863, 0.99756, 0.99619, 0.99452, 0.99255, 0.99027, 0.98769, \
	   0.98481, 0.98163, 0.97815, 0.97437, 0.9703, 0.96593, 0.96126, 0.9563, 0.95106, 0.94552, 0.93969, 0.93358, \
	   0.92718, 0.9205, 0.91355, 0.90631, 0.89879, 0.89101, 0.88295, 0.87462, 0.86603, 0.85717, 0.84805, \
	   0.83867, 0.82904, 0.81915, 0.80902, 0.79864, 0.78801, 0.77715, 0.76604, 0.75471, 0.74314, 0.73135, \
	   0.71934, 0.70711, 0.69466, 0.682, 0.66913, 0.65606, 0.64279, 0.62932, 0.61566, 0.60182, 0.58779, \
	   0.57358, 0.55919, 0.54464, 0.52992, 0.51504, 0.5, 0.48481, 0.46947, 0.45399, 0.43837, 0.42262, \
	   0.40674, 0.39073, 0.37461, 0.35837, 0.34202, 0.32557, 0.30902, 0.29237, 0.27564, 0.25882, 0.24192, \
	   0.22495, 0.20791, 0.19081, 0.17365, 0.15643, 0.13917, 0.12187, 0.10453, 0.087156, 0.069756, 0.052336, \
	   0.034899, 0.017452, 1.2246e-16, -0.017452, -0.034899, -0.052336, -0.069756, -0.087156, -0.10453, \
	   - 0.12187, -0.13917, -0.15643, -0.17365, -0.19081, -0.20791, -0.22495, -0.24192, -0.25882, -0.27564, \
	   - 0.29237, -0.30902, -0.32557, -0.34202, -0.35837, -0.37461, -0.39073, -0.40674, -0.42262, -0.43837, \
	   - 0.45399, -0.46947, -0.48481, -0.5, -0.51504, -0.52992, -0.54464, -0.55919, -0.57358, -0.58779, -0.60182, \
	   - 0.61566, -0.62932, -0.64279, -0.65606, -0.66913, -0.682, -0.69466, -0.70711, -0.71934, -0.73135, \
	   - 0.74314, -0.75471, -0.76604, -0.77715, -0.78801, -0.79864, -0.80902, -0.81915, -0.82904, -0.83867, \
	   - 0.84805, -0.85717, -0.86603, -0.87462, -0.88295, -0.89101, -0.89879, -0.90631, -0.91355, -0.9205, \
	   - 0.92718, -0.93358, -0.93969, -0.94552, -0.95106, -0.9563, -0.96126, -0.96593, -0.9703, -0.97437, \
	   - 0.97815, -0.98163, -0.98481, -0.98769, -0.99027, -0.99255, -0.99452, -0.99619, -0.99756, -0.99863, \
	   - 0.99939, -0.99985, -1, -0.99985, -0.99939, -0.99863, -0.99756, -0.99619, -0.99452, -0.99255, -0.99027, \
	   - 0.98769, -0.98481, -0.98163, -0.97815, -0.97437, -0.9703, -0.96593, -0.96126, -0.9563, -0.95106, \
	   - 0.94552, -0.93969, -0.93358, -0.92718, -0.9205, -0.91355, -0.90631, -0.89879, -0.89101, -0.88295, \
	   - 0.87462, -0.86603, -0.85717, -0.84805, -0.83867, -0.82904, -0.81915, -0.80902, -0.79864, -0.78801, \
	   - 0.77715, -0.76604, -0.75471, -0.74314, -0.73135, -0.71934, -0.70711, -0.69466, -0.682, -0.66913, \
	   - 0.65606, -0.64279, -0.62932, -0.61566, -0.60182, -0.58779, -0.57358, -0.55919, -0.54464, -0.52992, \
	   - 0.51504, -0.5, -0.48481, -0.46947, -0.45399, -0.43837, -0.42262, -0.40674, -0.39073, -0.37461, -0.35837\
	   , -0.34202, -0.32557, -0.30902, -0.29237, -0.27564, -0.25882, -0.24192, -0.22495, -0.20791, -0.19081, \
	   - 0.17365, -0.15643, -0.13917, -0.12187, -0.10453, -0.087156, -0.069756, -0.052336, -0.034899, \
	   - 0.017452, -2.4493e-16
   };

   float udf_cos[361] = {
	   1, 0.99985, 0.99939, 0.99863, 0.99756, 0.99619, 0.99452, 0.99255, 0.99027, 0.98769,\
	   0.98481, 0.98163, 0.97815, 0.97437, 0.9703, 0.96593, 0.96126, 0.9563, 0.95106, 0.94552,\
	   0.93969, 0.93358, 0.92718, 0.9205, 0.91355, 0.90631, 0.89879, 0.89101, 0.88295, 0.87462,\
	   0.86603, 0.85717, 0.84805, 0.83867, 0.82904, 0.81915, 0.80902, 0.79864, 0.78801, 0.77715,\
	   0.76604, 0.75471, 0.74314, 0.73135, 0.71934, 0.70711, 0.69466, 0.682, 0.66913, 0.65606,\
	   0.64279, 0.62932, 0.61566, 0.60182, 0.58779, 0.57358, 0.55919, 0.54464, 0.52992, 0.51504,\
	   0.5, 0.48481, 0.46947, 0.45399, 0.43837, 0.42262, 0.40674, 0.39073, 0.37461, 0.35837,\
	   0.34202, 0.32557, 0.30902, 0.29237, 0.27564, 0.25882, 0.24192, 0.22495, 0.20791, 0.19081,\
	   0.17365, 0.15643, 0.13917, 0.12187, 0.10453, 0.087156, 0.069756, 0.052336, 0.034899, \
	   0.017452, 6.1232e-17, -0.017452, -0.034899, -0.052336, -0.069756, -0.087156, -0.10453,\
	   -0.12187, -0.13917, -0.15643, -0.17365, -0.19081, -0.20791, -0.22495, -0.24192, -0.25882,\
	   -0.27564, -0.29237, -0.30902, -0.32557, -0.34202, -0.35837, -0.37461, -0.39073, -0.40674,\
	   -0.42262, -0.43837, -0.45399, -0.46947, -0.48481, -0.5, -0.51504, -0.52992, -0.54464,\
	   -0.55919, -0.57358, -0.58779, -0.60182, -0.61566, -0.62932, -0.64279, -0.65606, -0.66913,\
	   -0.682, -0.69466, -0.70711, -0.71934, -0.73135, -0.74314, -0.75471, -0.76604, -0.77715, \
	   -0.78801, -0.79864, -0.80902, -0.81915, -0.82904, -0.83867, -0.84805, -0.85717, -0.86603,\
	   -0.87462, -0.88295, -0.89101, -0.89879, -0.90631, -0.91355, -0.9205, -0.92718, -0.93358,\
	   -0.93969, -0.94552, -0.95106, -0.9563, -0.96126, -0.96593, -0.9703, -0.97437, -0.97815,\
	   -0.98163, -0.98481, -0.98769, -0.99027, -0.99255, -0.99452, -0.99619, -0.99756, -0.99863,\
	   -0.99939, -0.99985, -1, -0.99985, -0.99939, -0.99863, -0.99756, -0.99619, -0.99452,\
	   -0.99255, -0.99027, -0.98769, -0.98481, -0.98163, -0.97815, -0.97437, -0.9703, -0.96593,\
	   -0.96126, -0.9563, -0.95106, -0.94552, -0.93969, -0.93358, -0.92718, -0.9205, -0.91355,\
	   -0.90631, -0.89879, -0.89101, -0.88295, -0.87462, -0.86603, -0.85717, -0.84805, -0.83867,\
	   -0.82904, -0.81915, -0.80902, -0.79864, -0.78801, -0.77715, -0.76604, -0.75471, -0.74314,\
	   -0.73135, -0.71934, -0.70711, -0.69466, -0.682, -0.66913, -0.65606, -0.64279, -0.62932,\
	   -0.61566, -0.60182, -0.58779, -0.57358, -0.55919, -0.54464, -0.52992, -0.51504, -0.5, \
	   -0.48481, -0.46947, -0.45399, -0.43837, -0.42262, -0.40674, -0.39073, -0.37461, -0.35837,\
	   -0.34202, -0.32557, -0.30902, -0.29237, -0.27564, -0.25882, -0.24192, -0.22495, -0.20791,\
	   -0.19081, -0.17365, -0.15643, -0.13917, -0.12187, -0.10453, -0.087156, -0.069756,\
	   -0.052336, -0.034899, -0.017452, -1.837e-16, 0.017452, 0.034899, 0.052336, 0.069756,\
	   0.087156, 0.10453, 0.12187, 0.13917, 0.15643, 0.17365, 0.19081, 0.20791, 0.22495, 0.24192,\
	   0.25882, 0.27564, 0.29237, 0.30902, 0.32557, 0.34202, 0.35837, 0.37461, 0.39073, 0.40674, \
	   0.42262, 0.43837, 0.45399, 0.46947, 0.48481, 0.5, 0.51504, 0.52992, 0.54464, 0.55919, \
	   0.57358, 0.58779, 0.60182, 0.61566, 0.62932, 0.64279, 0.65606, 0.66913, 0.682, 0.69466,\
	   0.70711, 0.71934, 0.73135, 0.74314, 0.75471, 0.76604, 0.77715, 0.78801, 0.79864, 0.80902,\
	   0.81915, 0.82904, 0.83867, 0.84805, 0.85717, 0.86603, 0.87462, 0.88295, 0.89101, 0.89879,\
	   0.90631, 0.91355, 0.9205, 0.92718, 0.93358, 0.93969, 0.94552, 0.95106, 0.9563, 0.96126,\
	   0.96593, 0.9703, 0.97437, 0.97815, 0.98163, 0.98481, 0.98769, 0.99027, 0.99255, 0.99452,\
	   0.99619, 0.99756, 0.99863, 0.99939, 0.99985, 1
    };

   for (int row_i = 0; row_i < height; row_i ++) {
	   for (int col_j = 0; col_j < width; col_j++) {
		   for (int rad = min_radius; rad < max_radius; rad++) {
			   int rad_1 = rad - 5;
			   int rad_2 = rad + 5;
			   int r_diff = 0;
			   int g_diff = 0;
			   int b_diff = 0;
			   int num_r = 0;//用于记录在圆上的角度
			   int num_g = 0;
			   int num_b = 0;
			   totaldiff_r[i_r] = 0;
			   totaldiff_g[i_g] = 0;
			   totaldiff_b[i_b] = 0;

			   for (int angle = 0; angle < 360; angle++) {
				   int cor_x1 = (float)rad_1*udf_cos[angle] + col_j;
				   int cor_y1 = -(float)rad_1*udf_sin[angle] + row_i;
				   int cor_x2 = (float)rad_2*udf_cos[angle] + col_j;
				   int cor_y2 = -(float)rad_2* +udf_sin[angle]+row_i;

				   int flag1 = (cor_x1 >= 0) && (cor_x1 <= width);
				   int flag2 = (cor_x2 >= 0) && (cor_x2 <= width);
				   int flag3 = (cor_y1 >= 0) && (cor_y1 <= height);
				   int flag4 = (cor_y2 >= 0) && (cor_y2 <= height);

				   if (flag1 && flag2 && flag3 && flag4){
					   int pos1 = 3 * (cor_y1 * width + cor_x1);
				       int pos2 = 3 * (cor_y2 * width + cor_x2);
					   r_diff = abs(colorImg.data[pos1+2] - colorImg.data[pos2+2]);
					   g_diff = abs(colorImg.data[pos1 + 1] - colorImg.data[pos2 + 1]);
					   b_diff = abs(colorImg.data[pos1] - colorImg.data[pos2]);
					   if (r_diff > max_circle_diff) {
						   num_r++;
						   totaldiff_r[i_r] += r_diff;
					   }
					   if (g_diff > max_circle_diff) {
						   num_g++;
						   totaldiff_g[i_g] += g_diff;
					   }
					   if (b_diff > max_circle_diff) {
						   num_b++;
						   totaldiff_b[i_b] += b_diff;
					   }
				   }

			   }
			  if (num_r>=angle_set) {
				  x_r[i_r] = row_i;
				  y_r[i_r] = col_j;
				  r_r[i_r] = rad;
				  i_r++;
			   }
			  if (num_g >= angle_set) {
				  x_g[i_g] = row_i;
				  y_g[i_g] = col_j;
				  r_g[i_g] = rad;
				  i_g++;
			  }
			  if (num_b >= angle_set) {
				  x_b[i_b] = row_i;
				  y_b[i_b] = col_j;
				  r_b[i_b] = rad;
				  i_b++;
			  }
		   }
	   }
	   if ((i_r >= 10000) || (i_g >= 10000) || (i_b >= 10000)) {
		   break;
	   }
   }
   int final_x[1000] = { 0 };
   int final_y[1000] = { 0 };
   int final_r[1000] = { 0 };
   int final_diff[1000] = { 0 };
   int final_i = 0;
   int min_center_mo = min_center_dist*min_center_dist;
   
   for (int out = 0; out < 10000; out++) {
	   for (int in = out + 1; in < 10000; in++) {
		   if (r_r[out] == 0) break;
		   if (r_r[in] != 0) {
			   int mo = (x_r[out] - x_r[in])*(x_r[out] - x_r[in]) + (y_r[out] - y_r[in])*(y_r[out] - y_r[in]);
			   if (mo <= min_center_mo) {
				   int dif = abs(r_r[out] - r_r[in]);
				   if (dif < min_radius_dist) {
					   int chazhi = totaldiff_r[out] - totaldiff_r[in];
					   if (chazhi > 0) {
						   x_r[in] = 0;
						   y_r[in] = 0;
						   r_r[in] = 0;
						   totaldiff_r[in] = 0;
					   }
					   else {
						   x_r[out] = 0;
						   y_r[out] = 0;
						   r_r[out] = 0;
						   totaldiff_r[out] = 0;
					   }
				   }
			   }
		   }
	   }
   }
   for (int out = 0; out < 10000; out++) {
	   if (r_r[out] == 0);
	   else {
		   final_x[final_i] = x_r[out];
		   final_y[final_i] = y_r[out];
		   final_r[final_i] = r_r[out];
		   final_diff[final_i] = totaldiff_r[out];
		   final_i++;
	   }
   }

   for (int out = 0; out < 10000; out++) {
	   for (int in = out + 1; in < 10000; in++) {
		   if (r_g[out] == 0) break;
		   if (r_g[in] != 0) {
			   int mo = (x_g[out] - x_g[in])*(x_g[out] - x_g[in]) + (y_g[out] - y_g[in])*(y_g[out] - y_g[in]);
			   if (mo <= min_center_mo) {
				   int dif = abs(r_g[out] - r_g[in]);
				   if (dif < min_radius_dist) {
					   int chazhi = totaldiff_g[out] - totaldiff_g[in];
					   if (chazhi > 0) {
						   x_g[in] = 0;
						   y_g[in] = 0;
						   r_g[in] = 0;
						   totaldiff_g[in] = 0;
					   }
					   else {
						   x_g[out] = 0;
						   y_g[out] = 0;
						   r_g[out] = 0;
						   totaldiff_g[out] = 0;
					   }
				   }
			   }
		   }
	   }
   }
   for (int out = 0; out < 10000; out++) {
	   if (r_g[out] == 0);
	   else {
		   final_x[final_i] = x_g[out];
		   final_y[final_i] = y_g[out];
		   final_r[final_i] = r_g[out];
		   final_diff[final_i] = totaldiff_g[out];
		   final_i++;
	   }
   }
   for (int out = 0; out < 10000; out++) {
	   for (int in = out + 1; in < 10000; in++) {
		   if (r_b[out] == 0) break;
		   if (r_b[in] != 0) {
			   int mo = (x_b[out] - x_b[in])*(x_b[out] - x_b[in]) + (y_b[out] - y_b[in])*(y_b[out] - y_b[in]);
			   if (mo <= min_center_mo) {
				   int dif = abs(r_b[out] - r_b[in]);
				   if (dif < min_radius_dist) {
					   int chazhi = totaldiff_b[out] - totaldiff_b[in];
					   if (chazhi > 0) {
						   x_b[in] = 0;
						   y_b[in] = 0;
						   r_b[in] = 0;
						   totaldiff_b[in] = 0;
					   }
					   else {
						   x_b[out] = 0;
						   y_b[out] = 0;
						   r_b[out] = 0;
						   totaldiff_b[out] = 0;
					   }
				   }
			   }
		   }
	   }
   }
   for (int out = 0; out < 10000; out++) {
	   if (r_b[out] == 0);
	   else {
		   final_x[final_i] = x_b[out];
		   final_y[final_i] = y_b[out];
		   final_r[final_i] = r_b[out];
		   final_diff[final_i] = totaldiff_b[out];
		   final_i++;
	   }
   }
   for (int out = 0; out < 1000; out++) {
	   for (int in = out + 1; in < 1000; in++) {
		   if (final_r[out] == 0) break;
		   if (final_r[in] != 0) {
			   int mo = (final_x[out] - final_x[in])*(final_x[out] - final_x[in]) + (final_y[out] - final_y[in])*(final_y[out] - final_y[in]);
			   if (mo <= min_center_mo) {
				   int dif = abs(final_r[out] - final_r[in]);
				   if (dif < min_radius_dist) {
					   int chazhi = final_diff[out] - final_diff[in];
					   if (chazhi > 0) {
						   final_x[in] = 0;
						   final_y[in] = 0;
						   final_r[in] = 0;
						   final_diff[in] = 0;
					   }
					   else {
						   final_x[out] = 0;
						   final_y[out] = 0;
						   final_r[out] = 0;
						   final_diff[out] = 0;
					   }
				   }
			   }
		   }
	   }
   }
   int result_x[1000] = { 0 };
   int result_y[1000] = { 0 };
   int result_r[1000] = { 0 };
   int result_diff[1000] = { 0 };
   final_i = 0;
   int pos = 0;
   int max_diff = 0;
   for (int j = 0; j < max_circle; j++) {
	   pos = 0;
	   max_diff = 0;
	   for (int i = 0; i < 1000; i++) {
		   if (final_diff[i] > max_diff) {
			   max_diff = final_diff[i];
			   pos = i;
			   
		   }
	   }
	   if (max_diff == 0) {
		   break;
	   }
	   result_x[final_i] = final_x[pos];
	   result_y[final_i] = final_y[pos];
	   result_r[final_i] = final_r[pos];
	   result_diff[final_i] = final_diff[pos];
	   final_i++;
	   final_x[pos] = 0;
	   final_y[pos] = 0;
	   final_r[pos] = 0;
	   final_diff[pos] = 0;
   }

   *circle_cnt = final_i;
   for (int i = 0; i < final_i; i++) {
	   *x = result_y[i];
	   *y = result_x[i];
	   *radius = result_r[i];
	   x++;
	   y++;
	   radius++;
   }
   return 1;
}
