int ustc_Find_Circles_By_Difference(Mat colorImg, int *x, int *y, int *radius, int min_radius, int max_radius, int min_center_dist, int min_radius_dist, int max_circle_diff, int max_circle, int* circle_cnt)
{
#define PI (3217/1024)
#define MAX_LEN (1000)
#define MIN_PART_NUM (90)
#define MIN_GRAD_NUM (150)
#define SUB_FIND_CIRCLE_OK (0)
#define SUB_FIND_CIRCLE_FAIL (-1)
	//program protect part.
	if (NULL == colorImg.data)
	{
		cout << "The image is null!" << endl;
		return SUB_FIND_CIRCLE_FAIL;
	}
	if (NULL == circle_cnt)
	{
		cout << "The cnt point is null!" << endl;
		return SUB_FIND_CIRCLE_FAIL;
	}
	if (max_circle < 0)
	{
		cout << "The max_circle is illegal!" << endl;
		return SUB_FIND_CIRCLE_FAIL;
	}
	if (NULL == x || NULL == y)
	{
		cout << "The x or y mat is null!" << endl;
		return SUB_FIND_CIRCLE_FAIL;
	}
	if (NULL == radius)
	{
		cout << "The radius mat is null!" << endl;
		return SUB_FIND_CIRCLE_FAIL;
	}
	if (min_radius > max_radius || min_radius < 0)
	{
		cout << "The radius relationship is incorrcet!" << endl;
		return SUB_FIND_CIRCLE_FAIL;
	}
	if (min_center_dist < 0 || min_radius_dist < 0)
	{
		cout << "The dist data is incorrcet!" << endl;
		return SUB_FIND_CIRCLE_FAIL;
	}
	if (max_circle_diff < 0)
	{
		cout << "The max_circle_diff data is incorrcet!" << endl;
		return SUB_FIND_CIRCLE_FAIL;
	}
	//protect part end.
	int width = colorImg.cols, height = colorImg.rows;
	int mat_col_b[MAX_LEN], mat_row_b[MAX_LEN], mat_radius_b[MAX_LEN], mat_diff_b[MAX_LEN];
	int mat_col_g[MAX_LEN], mat_row_g[MAX_LEN], mat_radius_g[MAX_LEN], mat_diff_g[MAX_LEN];
	int mat_col_r[MAX_LEN], mat_row_r[MAX_LEN], mat_radius_r[MAX_LEN], mat_diff_r[MAX_LEN];

	//calculate Sobel and depart image to 3 images;
	Mat bImg(height, width, CV_8UC1, Scalar(0));
	Mat gImg(height, width, CV_8UC1, Scalar(0));
	Mat	rImg(height, width, CV_8UC1, Scalar(0));
	Mat blue_grad_x, blue_grad_y, green_grad_x, green_grad_y, red_grad_x, red_grad_y;
	for (int rows_i = 0; rows_i < height; rows_i++)
		for (int cols_j = 0; cols_j < width; cols_j++)
		{
			int num = rows_i*width + cols_j;
			uchar* colordata = &colorImg.data[3 * (rows_i*width + cols_j)];
			bImg.data[num] = *(colordata + 0);
			gImg.data[num] = *(colordata + 1);
			rImg.data[num] = *(colordata + 2);
		}
	Sobel(bImg, blue_grad_x, CV_16SC1, 1, 0, 3, 1, 0, BORDER_DEFAULT);
	Sobel(bImg, blue_grad_y, CV_16SC1, 0, 1, 3, 1, 0, BORDER_DEFAULT);
	Sobel(gImg, green_grad_x, CV_16SC1, 1, 0, 3, 1, 0, BORDER_DEFAULT);
	Sobel(gImg, green_grad_y, CV_16SC1, 0, 1, 3, 1, 0, BORDER_DEFAULT);
	Sobel(rImg, red_grad_x, CV_16SC1, 1, 0, 3, 1, 0, BORDER_DEFAULT);
	Sobel(rImg, red_grad_y, CV_16SC1, 0, 1, 3, 1, 0, BORDER_DEFAULT);

	//START OF FINDING CIRCLE 
	int *col_b = mat_col_b, *row_b = mat_row_b, *rad_b = mat_radius_b, *diff_b = mat_diff_b;
	int *col_g = mat_col_g, *row_g = mat_row_g, *rad_g = mat_radius_g, *diff_g = mat_diff_g;
	int *col_r = mat_col_r, *row_r = mat_row_r, *rad_r = mat_radius_r, *diff_r = mat_diff_r;
	int templen_b = 0; int templen_g = 0; int templen_r = 0;
	int big_circle_sin[360], small_circle_sin[360];
	int big_circle_cos[360], small_circle_cos[360];
	int mid_circle_sin[360], mid_circle_cos[360];
	for (int r = min_radius; r <= max_radius; r++)
	{
		for (int theta = 0; theta < 360; theta++)
		{
			float angle = theta * 2.0 * PI / 360;
			big_circle_sin[theta] = (r + 3.0)*sin(angle);
			big_circle_cos[theta] = (r + 3.0)*cos(angle);
			small_circle_sin[theta] = (r - 3.0)*sin(angle);
			small_circle_cos[theta] = (r - 3.0)*cos(angle);
			mid_circle_sin[theta] = r*sin(angle);
			mid_circle_cos[theta] = r*cos(angle);
		}
		for (int rows_i = 0; rows_i < height; rows_i++)
			for (int cols_j = 0; cols_j < width; cols_j++)
			{
				int total_small_b = 0, total_big_b = 0;
				int total_small_g = 0, total_big_g = 0;
				int total_small_r = 0, total_big_r = 0;
				int total_times_b = 0;
				int total_times_g = 0;
				int total_times_r = 0;
				for (int theta = 0; theta < 360; theta++)
				{
					int edge_big_i = rows_i + big_circle_sin[theta];
					int edge_big_j = cols_j + big_circle_cos[theta];
					int edge_small_i = rows_i + small_circle_sin[theta];
					int edge_small_j = cols_j + small_circle_cos[theta];
					int edge_i = rows_i + mid_circle_sin[theta];
					int edge_j = cols_j + mid_circle_cos[theta];
					int num = edge_i*width + cols_j;
					int small_num = edge_small_i*width + edge_small_j;
					int big_num = edge_big_i*width + edge_big_j;
					if ((edge_big_i >= 0) && (edge_big_j >= 0) && (edge_big_i < height) && (edge_big_j < width))
					{
						total_small_b += bImg.data[small_num];
						total_big_b += bImg.data[big_num];
						total_times_b++;

						total_small_g += gImg.data[small_num];
						total_big_g += gImg.data[big_num];
						total_times_g++;

						total_small_r += rImg.data[small_num];
						total_big_r += rImg.data[big_num];
						total_times_r++;
					}
				}
				int total_avediff = abs(total_big_b - total_small_b) / total_times_b;
				if (total_avediff > max_circle_diff)
				{
					*(rad_b++) = r;
					*(col_b++) = cols_j;
					*(row_b++) = rows_i;
					*(diff_b++) = total_avediff;
					templen_b++;
				}

				total_avediff = abs(total_big_g - total_small_g) / total_times_g;
				if (total_avediff > max_circle_diff)
				{
					*(rad_g++) = r;
					*(col_g++) = cols_j;
					*(row_g++) = rows_i;
					*(diff_g++) = total_avediff;
					templen_g++;
				}

				total_avediff = abs(total_big_r - total_small_r) / total_times_r;
				if (total_avediff > max_circle_diff)
				{
					*(rad_r++) = r;
					*(col_r++) = cols_j;
					*(row_r++) = rows_i;
					*(diff_r++) = total_avediff;
					templen_r++;
				}
			}
	}
	//choose the biggest circle in an small area.   start:
		//as for green
	for (int i = 0; i < templen_g; i++)
		for (int j = i + 1; j < templen_g; j++)
		{
			if (mat_col_g[i] >= 0 && mat_col_g[j] >= 0)
				if ((mat_col_g[i] - mat_col_g[j])*(mat_col_g[i] - mat_col_g[j]) + (mat_row_g[i] - mat_row_g[j])*(mat_row_g[i] - mat_row_g[j]) < 25 && abs(mat_radius_g[i] - mat_radius_g[j]) < 5)
				{
					if (mat_diff_g[i] < mat_diff_g[j])
					{
						mat_col_g[i] = SUB_FIND_CIRCLE_FAIL;
						mat_row_g[i] = SUB_FIND_CIRCLE_FAIL;
						mat_radius_g[i] = SUB_FIND_CIRCLE_FAIL;
					}
					else if (mat_diff_g[i] >= mat_diff_g[j])
					{
						mat_col_g[j] = SUB_FIND_CIRCLE_FAIL;
						mat_row_g[j] = SUB_FIND_CIRCLE_FAIL;
						mat_radius_g[j] = SUB_FIND_CIRCLE_FAIL;
					}
				}
		}
	int col_g_final[MAX_LEN], row_g_final[MAX_LEN], radius_g_final[MAX_LEN], diff_g_final[MAX_LEN];
	int add_g_j = 0;
	for (int i = 0; i < templen_g; i++)
	{
		if (mat_col_g[i] >= 0)
		{
			*(col_g_final + add_g_j) = mat_col_g[i];
			*(row_g_final + add_g_j) = mat_row_g[i];
			*(radius_g_final + add_g_j) = mat_radius_g[i];
			*(diff_g_final + add_g_j++) = mat_diff_g[i];
		}
	}
	int len_green = add_g_j;
	//as for blue
	for (int i = 0; i < templen_b; i++)
		for (int j = i + 1; j < templen_b; j++)
		{
			if (mat_col_b[i] >= 0 && mat_col_b[j] >= 0)
				if ((mat_col_b[i] - mat_col_b[j])*(mat_col_b[i] - mat_col_b[j]) + (mat_row_b[i] - mat_row_b[j])*(mat_row_b[i] - mat_row_b[j]) < 25 && abs(mat_radius_b[i] - mat_radius_b[j]) < 5)
				{
					if (mat_diff_b[i] < mat_diff_b[j])
					{
						mat_col_b[i] = SUB_FIND_CIRCLE_FAIL;
						mat_row_b[i] = SUB_FIND_CIRCLE_FAIL;
						mat_radius_g[i] = SUB_FIND_CIRCLE_FAIL;
					}
					else if (mat_diff_b[i] >= mat_diff_b[j])
					{
						mat_col_b[j] = SUB_FIND_CIRCLE_FAIL;
						mat_row_b[j] = SUB_FIND_CIRCLE_FAIL;
						mat_radius_b[j] = SUB_FIND_CIRCLE_FAIL;
					}
				}
		}
	int col_b_final[MAX_LEN], row_b_final[MAX_LEN], radius_b_final[MAX_LEN], diff_b_final[MAX_LEN];
	int add_b_j = 0;
	for (int i = 0; i < templen_b; i++)
	{
		if (mat_col_b[i] >= 0)
		{
			*(col_b_final + add_b_j) = mat_col_b[i];
			*(row_b_final + add_b_j) = mat_row_b[i];
			*(radius_b_final + add_b_j) = mat_radius_b[i];
			*(diff_b_final + add_b_j++) = mat_diff_b[i];
		}
	}
	int len_blue = add_b_j;
	//as for red
	for (int i = 0; i < templen_r; i++)
		for (int j = i + 1; j < templen_r; j++)
		{
			if (mat_col_r[i] >= 0 && mat_col_r[j] >= 0)
				if ((mat_col_r[i] - mat_col_r[j])*(mat_col_r[i] - mat_col_r[j]) + (mat_row_r[i] - mat_row_r[j])*(mat_row_r[i] - mat_row_r[j]) < 25 && abs(mat_radius_r[i] - mat_radius_r[j]) < 5)
				{
					if (mat_diff_r[i] < mat_diff_r[j])
					{
						mat_col_r[i] = SUB_FIND_CIRCLE_FAIL;
						mat_row_r[i] = SUB_FIND_CIRCLE_FAIL;
						mat_radius_r[i] = SUB_FIND_CIRCLE_FAIL;
					}
					else if (mat_diff_r[i] >= mat_diff_r[j])
					{
						mat_col_r[j] = SUB_FIND_CIRCLE_FAIL;
						mat_row_r[j] = SUB_FIND_CIRCLE_FAIL;
						mat_radius_r[j] = SUB_FIND_CIRCLE_FAIL;
					}
				}
		}
	int col_r_final[MAX_LEN], row_r_final[MAX_LEN], radius_r_final[MAX_LEN], diff_r_final[MAX_LEN];
	int add_r_j = 0;
	for (int i = 0; i < templen_r; i++)
	{
		if (mat_col_r[i] >= 0)
		{
			*(col_r_final + add_r_j) = mat_col_r[i];
			*(row_r_final + add_r_j) = mat_row_r[i];
			*(radius_r_final + add_r_j) = mat_radius_r[i];
			*(diff_r_final + add_r_j++) = mat_diff_r[i];
		}
	}
	int len_red = add_r_j;
	//choose end.

	//three channels combine to one result.use b as fundation.  start:
	if (len_red == 0 && len_green == 0 && len_blue == 0)
	{
		*circle_cnt = 0;
		return SUB_FIND_CIRCLE_OK;
	}
	int len_comb = len_blue;
	int lengthen = 0;
	int self_add_j = 0;
	for (int self_add_i = 0; self_add_i < len_green; self_add_i++)
	{
		for (self_add_j = 0; self_add_j < len_blue; self_add_j++)
		{
			if ((col_g_final[self_add_i] - col_b_final[self_add_j])*(col_g_final[self_add_i] - col_b_final[self_add_j]) + (row_g_final[self_add_i] - row_b_final[self_add_j])*(row_g_final[self_add_i] - row_b_final[self_add_j]) < 25 && abs(radius_g_final[self_add_i] - radius_b_final[self_add_j]) < 5)
			{
				break;
			}
		}
		if (self_add_j == len_blue)
		{
			col_b_final[len_blue + lengthen] = col_g_final[self_add_i];
			row_b_final[len_blue + lengthen] = row_g_final[self_add_i];
			radius_b_final[len_blue + lengthen] = radius_g_final[self_add_i];
			diff_b_final[len_blue + lengthen++] = diff_g_final[self_add_i];
			len_comb++;
		}
	}
	for (int self_add_i = 0; self_add_i < len_red; self_add_i++)
	{
		for (self_add_j = 0; self_add_j < len_blue; self_add_j++)
		{
			if ((col_r_final[self_add_i] - col_b_final[self_add_j])*(col_r_final[self_add_i] - col_b_final[self_add_j]) + (row_r_final[self_add_i] - row_b_final[self_add_j])*(row_r_final[self_add_i] - row_b_final[self_add_j]) < 25 && abs(radius_r_final[self_add_i] - radius_b_final[self_add_j]) < 5)
			{
				break;
			}
		}
		if (self_add_j == len_red)
		{
			col_b_final[len_blue + lengthen] = col_r_final[self_add_i];
			row_b_final[len_blue + lengthen] = row_r_final[self_add_i];
			radius_b_final[len_blue + lengthen] = radius_r_final[self_add_i];
			diff_b_final[len_blue + lengthen++] = diff_r_final[self_add_i];
			len_comb++;
		}
	}
	//combine end.

	//rearrange theresult(diff from big to small)
	int temp_col = 0, temp_row = 0, temp_radius = 0;
	for (int arr_i = 0; arr_i < len_comb - 1; arr_i++)
	{
		int max_diff_j = arr_i;
		for (int arr_j = arr_i + 1; arr_j < len_comb; arr_j++)
		{
			if (diff_b_final[arr_i] < diff_b_final[arr_j])
			{
				max_diff_j = arr_j;
			}
		}
		temp_col = col_b_final[arr_i], temp_row = row_b_final[arr_i], temp_radius = radius_b_final[arr_i];
		col_b_final[arr_i] = col_b_final[max_diff_j], row_b_final[arr_i] = row_b_final[max_diff_j], radius_b_final[arr_i] = radius_b_final[max_diff_j];
		col_b_final[max_diff_j] = temp_col, row_b_final[max_diff_j] = temp_row, radius_b_final[max_diff_j] = temp_radius;
	}
	//rearrange finished.
	if (len_comb <= max_circle)
	{
		for (int i = 0; i < len_comb; i++)
		{
			*(x + i) = col_b_final[i];
			*(y + i) = row_b_final[i];
			*(radius + i) = radius_b_final[i];
		}
		*circle_cnt = len_comb;
	}
	else if (len_comb > max_circle)
	{
		for (int i = 0; i < max_circle; i++)
		{
			*(x + i) = col_b_final[i];
			*(y + i) = row_b_final[i];
			*(radius + i) = radius_b_final[i];
		}
		*circle_cnt = len_comb;
	}
	return SUB_FIND_CIRCLE_OK;
}
