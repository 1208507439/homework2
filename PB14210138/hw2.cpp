#include <opencv2/opencv.hpp>  
#include <math.h>
using namespace cv;
using namespace std;
#define my_ok 1
#define my_fail 0
#define pi 3.1415926f
const int kvalue = 15;
float cos_list[360] = { 1,0.999848,0.999391,0.99863,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.97437,0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.93358,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.87462,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,0.75471,0.743145,0.731354,0.71934,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.62932,0.615662,0.601815,0.587785,0.573577,0.559193,0.544639,0.529919,0.515038,0.5,0.48481,0.469472,0.453991,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.34202,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156435,0.139173,0.121869,0.104529,0.0871558,0.0697565,0.0523361,0.0348996,0.0174525,7.54979e-08,-0.0174524,-0.0348995,-0.0523358,-0.0697564,-0.0871556,-0.104529,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.34202,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.45399,-0.469471,-0.48481,-0.5,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.62932,-0.642787,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.71934,-0.731354,-0.743145,-0.754709,-0.766044,-0.777146,-0.788011,-0.798635,-0.809017,-0.819152,-0.829037,-0.83867,-0.848048,-0.857167,-0.866025,-0.87462,-0.882948,-0.891006,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.93358,-0.939693,-0.945518,-0.951056,-0.956305,-0.961262,-0.965926,-0.970296,-0.97437,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.99863,-0.999391,-0.999848,-1,-0.999848,-0.999391,-0.99863,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.97437,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.93358,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.87462,-0.866026,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766045,-0.75471,-0.743145,-0.731354,-0.71934,-0.707107,-0.694659,-0.681998,-0.669131,-0.656059,-0.642788,-0.629321,-0.615662,-0.601815,-0.587785,-0.573577,-0.559193,-0.544639,-0.529919,-0.515038,-0.5,-0.48481,-0.469472,-0.453991,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.342021,-0.325568,-0.309017,-0.292372,-0.275638,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173649,-0.156435,-0.139173,-0.12187,-0.104529,-0.0871562,-0.069757,-0.0523361,-0.0348998,-0.0174523,1.19249e-08,0.0174518,0.0348993,0.0523357,0.0697566,0.0871557,0.104528,0.121869,0.139173,0.156434,0.173648,0.190809,0.207911,0.224951,0.241921,0.258819,0.275637,0.292371,0.309017,0.325568,0.34202,0.358368,0.374606,0.390731,0.406736,0.422618,0.438371,0.45399,0.469472,0.484809,0.499999,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615661,0.62932,0.642788,0.656059,0.66913,0.681998,0.694658,0.707107,0.71934,0.731353,0.743145,0.75471,0.766044,0.777146,0.788011,0.798635,0.809017,0.819152,0.829037,0.838671,0.848048,0.857167,0.866025,0.87462,0.882947,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.93358,0.939693,0.945518,0.951056,0.956305,0.961262,0.965926,0.970296,0.97437,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.99863,0.999391,0.999848 };
float sin_list[360] = { 0,0.0174524,0.0348995,0.052336,0.0697565,0.0871557,0.104528,0.121869,0.139173,0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.34202,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.453991,0.469472,0.48481,0.5,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615662,0.62932,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.71934,0.731354,0.743145,0.75471,0.766044,0.777146,0.788011,0.798635,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.87462,0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.93358,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.97437,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.99863,0.999391,0.999848,1,0.999848,0.999391,0.99863,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.97437,0.970296,0.965926,0.961262,0.956305,0.951056,0.945519,0.939693,0.93358,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,0.87462,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,0.75471,0.743145,0.731354,0.71934,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.62932,0.615662,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.5,0.48481,0.469472,0.45399,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.34202,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156435,0.139173,0.121869,0.104529,0.0871558,0.0697565,0.052336,0.0348996,0.0174525,5.35898e-08,-0.0174522,-0.0348995,-0.0523359,-0.0697566,-0.0871557,-0.104528,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,-0.325568,-0.34202,-0.358368,-0.374606,-0.390731,-0.406737,-0.422618,-0.438371,-0.45399,-0.469472,-0.48481,-0.5,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.62932,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.71934,-0.731354,-0.743145,-0.75471,-0.766044,-0.777146,-0.788011,-0.798635,-0.809017,-0.819152,-0.829037,-0.838671,-0.848048,-0.857167,-0.866025,-0.87462,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.93358,-0.939693,-0.945519,-0.951056,-0.956305,-0.961262,-0.965926,-0.970296,-0.97437,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.99863,-0.999391,-0.999848,-1,-0.999848,-0.999391,-0.99863,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.97437,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,-0.945519,-0.939693,-0.93358,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.87462,-0.866026,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766045,-0.75471,-0.743145,-0.731354,-0.71934,-0.707107,-0.694659,-0.681998,-0.669131,-0.656059,-0.642788,-0.629321,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.5,-0.48481,-0.469472,-0.453991,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.34202,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.12187,-0.104528,-0.0871559,-0.0697568,-0.052336,-0.0348997,-0.0174524 };


int ustc_Find_Circles_By_Difference(Mat colorImg,int min_radius,int max_radius,int min_center_dist,int min_radius_dist,int max_circle_diff,
	int* x,
	int* y,
	int* radius,
	int* circle_cnt,
	int max_circle) {

	if (NULL == colorImg.data || CV_8UC3 != colorImg.type())
	{
		cout << "No image input!" << endl;
		return my_fail;
	}
	if (min_radius > max_radius || min_radius < 0)
	{
		cout << "please check the max radius and the min_radius!" << endl;
		return my_fail;
	}
	if (min_center_dist < 0 || min_radius_dist < 0)
	{
		cout << "please check the dist value!" << endl;
		return my_fail;
	}
	if (max_circle_diff < 0)
	{
		cout << "Tplease check the circles diff value!" << endl;
		return my_fail;
	}
	if (NULL == circle_cnt)
	{
		cout << "Please check the count value!" << endl;
		return my_fail;
	}
	if (max_circle < 0)
	{
		cout << "Please check the max circle value!" << endl;
		return my_fail;
	}
	if (NULL == x || NULL == y)
	{
		cout << "please check x and y!" << endl;
		return my_fail;
	}
	if (NULL == radius)
	{
		cout << "please check the redius!" << endl;
		return my_fail;
	}

    *circle_cnt = 0;

	Mat src_color = colorImg;
	int width = src_color.cols, height = src_color.rows;
	Mat grad_x, grad_y, mag;
	Sobel(src_color, grad_x, CV_32F, 1, 0, 3, 1, 0, BORDER_DEFAULT);
	Sobel(src_color, grad_y, CV_32F, 0, 1, 3, 1, 0, BORDER_DEFAULT);
	magnitude(grad_x, grad_y, mag);

	Mat blue_grad_x, blue_grad_y, green_grad_x, green_grad_y, red_grad_x, red_grad_y;
	Mat bImg(height, width, CV_8UC1, Scalar(0));
	Mat gImg(height, width, CV_8UC1, Scalar(0));
	Mat	rImg(height, width, CV_8UC1, Scalar(0));
	int tempxyr[30000];
	int tempdiff[30000];
	int diff[30000];
	for (int ii = 0; ii < height; ii++)
	for (int jj = 0; jj < width; jj++)
	{
	int kk = ii*width + jj;
	uchar* color = &colorImg.data[3 * (ii*width + jj)];
	bImg.data[kk] = *(color + 0);
	gImg.data[kk] = *(color + 1);
	rImg.data[kk] = *(color + 2);
	}
	int sincosxr[360 * 301];
	for (int theta = 0; theta <= 359; ++theta)
	{
		for (int r = 0; r <= 300; ++r)
		{
			sincosxr[r * 360 + theta] = (int)(3.0*(float)r*sin((float)theta*3.141592654 / 180.0))*width;
			sincosxr[r * 360 + theta] += (int)(3.0*(float)r*cos((float)theta*3.141592654 / 180.0));
		}
	}
	int inerb[5], inerg[5], iner[5];
	int outb[5], outg[5], outr[5];
	for (int row = min_radius + 6; row < height - min_radius - 6; row++)
	{
		for (int col = min_radius + 6; col < width - min_radius - 6; col++)
		{
			int nowr = min_radius;
			int nowmaxr = min(col - 6, row - 6);
			nowmaxr = min(nowmaxr, height - row - 7);
			nowmaxr = min(nowmaxr, width - col - 7);

			for (int k = 0; k <= 4; ++k)
			{
				inerb[k] = 0;
				inerg[k] = 0;
				iner[k] = 0;
				outb[k] = 0;
				outg[k] = 0;
				outr[k] = 0;
			}
			for (int k = 0; k <= 4; ++k)
			{
				int inr = nowr - k;
				int outr1 = nowr + 1 + k;
				int rc = 3 * (row*width + col);
				for (int theta = 0; theta <= 359; theta++)
				{
					int intrct = rc + sincosxr[inr * 360 + theta];
					int intrct1 = rc + sincosxr[outr1 * 360 + theta];
					outb[k] += colorImg.data[intrct1];
					inerb[4 - k] += colorImg.data[intrct];
					inerg[4 - k] += colorImg.data[intrct + 1];
					outg[k] += colorImg.data[intrct1 + 1];
					iner[4 - k] += colorImg.data[intrct + 2];
					outr[k] += colorImg.data[intrct1 + 2];

				}
			}
			int inerb1 = 0;
			int inerg1 = 0;
			int iner1 = 0;
			int outb1 = 0;
			int outg1 = 0;
			int outr1 = 0;
			for (int k = 0; k <= 4; ++k)
			{
				inerb1 += inerb[k];
				iner1 += iner[k];
				inerg1 += inerg[k];
				outb1 += outb[k];
				outg1 += outg[k];
				outr1 += outr[k];
			}
			for (nowr = min_radius; nowr <= nowmaxr; nowr++)
			{


				int diffb = inerb1 - outb1;
				int diffg = inerg1 - outg1;
				int diffr = iner1 - outr1;
				int nown = 0;
				if (diffb> max_circle_diff || diffb < -max_circle_diff)
				{
					if (nown == 20000)
					{
						break;
					}
					tempxyr[3 * nown] = row;
					tempxyr[3 * nown + 1] = col;
					tempxyr[3 * nown + 2] = nowr;

					tempdiff[nown] = abs(diffb);
					nown++;
				}
				else if (diffg > max_circle_diff || diffg < -max_circle_diff)
				{
					if (nown == 20000)
					{
						break;
					}
					tempxyr[3 * nown] = row;
					tempxyr[3 * nown + 1] = col;
					tempxyr[3 * nown + 2] = nowr;
					tempdiff[nown] = abs(diffg);
					nown++;
				}
				else if (diffr > max_circle_diff || diffr < -max_circle_diff)
				{
					if (nown == 20000)
					{
						break;
					}
					tempxyr[3 * nown] = row;
					tempxyr[3 * nown + 1] = col;
					tempxyr[3 * nown + 2] = nowr;
					tempdiff[nown] = abs(diffr);
					nown++;
				}
				int k = (nowr - min_radius) % 5;
				inerb1 -= inerb[k];
				inerg1 -= inerg[k];
				iner1 -= iner[k];
				outb1 -= outb[k];
				outg1 -= outg[k];
				outr1 -= outr[k];
				inerb[k] = outb[k];
				inerg[k] = outg[k];
				iner[k] = outr[k];
				iner1 += iner[k];
				inerb1 += inerb[k];
				inerg1 += inerg[k];
				outr1 = nowr + 6;
				int rc = 3 * (row*width + col);
				for (int theta = 0; theta <= 359; theta++)
				{
					int intrct1 = rc + sincosxr[outr1 * 360 + theta];
					outb[k] += colorImg.data[intrct1];
					outg[k] += colorImg.data[intrct1 + 1];
					outr[k] += colorImg.data[intrct1 + 2];

				}
				outb1 += outb[k];
				outg1 += outg[k];
				outr1 += outr[k];

			}

		}
	}
	


	Mat dst(src_color.size(), src_color.type());
	dst = Scalar::all(0);

	Mat src_gray; 
	cvtColor(src_color, src_gray, COLOR_BGR2GRAY);
	imwrite("src_gray.png", src_gray);


	vector<Vec3f> circles; 
	HoughCircles(src_gray, circles, CV_HOUGH_GRADIENT, 1.5, min_center_dist, 130, 100, min_radius, max_radius); 

	cout << "x=\ty=\tr=" << endl;
	int pp = 1;
	if (circles.size() > max_circle) pp = max_circle;
	else  pp = circles.size();
	for (size_t i = 0; i < pp; i++)
		{
			Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
			int radius2 = cvRound(circles[i][2]);

			circle(dst, center, 0, Scalar(0, 255, 0), -1, 8, 0);
			circle(dst, center, radius2, Scalar(0, 0, 255), 1, 8, 0);
			*(x + i) = circles[i][0];
			*(y + i) = circles[i][1];
			*(radius + i) = circles[i][2];
			(*circle_cnt)++;

			cout << cvRound(circles[i][0]) << "\t" << cvRound(circles[i][1]) << "\t"
				<< cvRound(circles[i][2]) << endl;
		}

	imshow("The circle", dst);
	imwrite("dst.png", dst);

	waitKey();
	return my_ok;

}
