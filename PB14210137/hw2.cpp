#include "opencv2\opencv.hpp"
#include <iostream>
#include <cmath>
#include <ctime>

#define MY_OK 1
#define MY_FAIL 0
#define MY_PI 3.1415926535897932
#define MY_LENGTH 2000

using namespace cv;
using namespace std;

float calculated_sin[] = { 0.000000, 0.017452, 0.034899, 0.052336, 0.069756, 0.087156, 0.104528, 0.121869, 0.139173, 0.156434,
0.173648, 0.190809, 0.207912, 0.224951, 0.241922, 0.258819, 0.275637, 0.292372, 0.309017, 0.325568,
0.342020, 0.358368, 0.374607, 0.390731, 0.406737, 0.422618, 0.438371, 0.453990, 0.469472, 0.484810,
0.500000, 0.515038, 0.529919, 0.544639, 0.559193, 0.573576, 0.587785, 0.601815, 0.615661, 0.629320,
0.642788, 0.656059, 0.669131, 0.681998, 0.694658, 0.707107, 0.719340, 0.731354, 0.743145, 0.754710,
0.766044, 0.777146, 0.788011, 0.798636, 0.809017, 0.819152, 0.829038, 0.838671, 0.848048, 0.857167,
0.866025, 0.874620, 0.882948, 0.891007, 0.898794, 0.906308, 0.913545, 0.920505, 0.927184, 0.933580,
0.939693, 0.945519, 0.951057, 0.956305, 0.961262, 0.965926, 0.970296, 0.974370, 0.978148, 0.981627,
0.984808, 0.987688, 0.990268, 0.992546, 0.994522, 0.996195, 0.997564, 0.998630, 0.999391, 0.999848,
1.000000, 0.999848, 0.999391, 0.998630, 0.997564, 0.996195, 0.994522, 0.992546, 0.990268, 0.987688,
0.984808, 0.981627, 0.978148, 0.974370, 0.970296, 0.965926, 0.961262, 0.956305, 0.951057, 0.945519,
0.939693, 0.933580, 0.927184, 0.920505, 0.913545, 0.906308, 0.898794, 0.891007, 0.882948, 0.874620,
0.866025, 0.857167, 0.848048, 0.838671, 0.829038, 0.819152, 0.809017, 0.798636, 0.788011, 0.777146,
0.766044, 0.754710, 0.743145, 0.731354, 0.719340, 0.707107, 0.694658, 0.681998, 0.669131, 0.656059,
0.642788, 0.629320, 0.615661, 0.601815, 0.587785, 0.573576, 0.559193, 0.544639, 0.529919, 0.515038,
0.500000, 0.484810, 0.469472, 0.453990, 0.438371, 0.422618, 0.406737, 0.390731, 0.374607, 0.358368,
0.342020, 0.325568, 0.309017, 0.292372, 0.275637, 0.258819, 0.241922, 0.224951, 0.207912, 0.190809,
0.173648, 0.156434, 0.139173, 0.121869, 0.104528, 0.087156, 0.069756, 0.052336, 0.034899, 0.017452,
0.000000, -0.017452, -0.034899, -0.052336, -0.069756, -0.087156, -0.104528, -0.121869, -0.139173, -0.156434,
-0.173648, -0.190809, -0.207912, -0.224951, -0.241922, -0.258819, -0.275637, -0.292372, -0.309017, -0.325568,
-0.342020, -0.358368, -0.374607, -0.390731, -0.406737, -0.422618, -0.438371, -0.453990, -0.469472, -0.484810,
-0.500000, -0.515038, -0.529919, -0.544639, -0.559193, -0.573576, -0.587785, -0.601815, -0.615661, -0.629320,
-0.642788, -0.656059, -0.669131, -0.681998, -0.694658, -0.707107, -0.719340, -0.731354, -0.743145, -0.754710,
-0.766044, -0.777146, -0.788011, -0.798636, -0.809017, -0.819152, -0.829038, -0.838671, -0.848048, -0.857167,
-0.866025, -0.874620, -0.882948, -0.891007, -0.898794, -0.906308, -0.913545, -0.920505, -0.927184, -0.933580,
-0.939693, -0.945519, -0.951057, -0.956305, -0.961262, -0.965926, -0.970296, -0.974370, -0.978148, -0.981627,
-0.984808, -0.987688, -0.990268, -0.992546, -0.994522, -0.996195, -0.997564, -0.998630, -0.999391, -0.999848,
-1.000000, -0.999848, -0.999391, -0.998630, -0.997564, -0.996195, -0.994522, -0.992546, -0.990268, -0.987688,
-0.984808, -0.981627, -0.978148, -0.974370, -0.970296, -0.965926, -0.961262, -0.956305, -0.951057, -0.945519,
-0.939693, -0.933580, -0.927184, -0.920505, -0.913545, -0.906308, -0.898794, -0.891007, -0.882948, -0.874620,
-0.866025, -0.857167, -0.848048, -0.838671, -0.829038, -0.819152, -0.809017, -0.798636, -0.788011, -0.777146,
-0.766044, -0.754710, -0.743145, -0.731354, -0.719340, -0.707107, -0.694658, -0.681998, -0.669131, -0.656059,
-0.642788, -0.629320, -0.615661, -0.601815, -0.587785, -0.573576, -0.559193, -0.544639, -0.529919, -0.515038,
-0.500000, -0.484810, -0.469472, -0.453990, -0.438371, -0.422618, -0.406737, -0.390731, -0.374607, -0.358368,
-0.342020, -0.325568, -0.309017, -0.292372, -0.275637, -0.258819, -0.241922, -0.224951, -0.207912, -0.190809,
-0.173648, -0.156434, -0.139173, -0.121869, -0.104528, -0.087156, -0.069756, -0.052336, -0.034899, -0.017452 };

float calculated_cos[] = { 1.000000, 0.999848, 0.999391, 0.998630, 0.997564, 0.996195, 0.994522, 0.992546, 0.990268, 0.987688,
0.984808, 0.981627, 0.978148, 0.974370, 0.970296, 0.965926, 0.961262, 0.956305, 0.951057, 0.945519,
0.939693, 0.933580, 0.927184, 0.920505, 0.913545, 0.906308, 0.898794, 0.891007, 0.882948, 0.874620,
0.866025, 0.857167, 0.848048, 0.838671, 0.829038, 0.819152, 0.809017, 0.798636, 0.788011, 0.777146,
0.766044, 0.754710, 0.743145, 0.731354, 0.719340, 0.707107, 0.694658, 0.681998, 0.669131, 0.656059,
0.642788, 0.629320, 0.615661, 0.601815, 0.587785, 0.573576, 0.559193, 0.544639, 0.529919, 0.515038,
0.500000, 0.484810, 0.469472, 0.453990, 0.438371, 0.422618, 0.406737, 0.390731, 0.374607, 0.358368,
0.342020, 0.325568, 0.309017, 0.292372, 0.275637, 0.258819, 0.241922, 0.224951, 0.207912, 0.190809,
0.173648, 0.156434, 0.139173, 0.121869, 0.104528, 0.087156, 0.069756, 0.052336, 0.034899, 0.017452,
0.000000, -0.017452, -0.034899, -0.052336, -0.069756, -0.087156, -0.104528, -0.121869, -0.139173, -0.156434,
-0.173648, -0.190809, -0.207912, -0.224951, -0.241922, -0.258819, -0.275637, -0.292372, -0.309017, -0.325568,
-0.342020, -0.358368, -0.374607, -0.390731, -0.406737, -0.422618, -0.438371, -0.453990, -0.469472, -0.484810,
-0.500000, -0.515038, -0.529919, -0.544639, -0.559193, -0.573576, -0.587785, -0.601815, -0.615661, -0.629320,
-0.642788, -0.656059, -0.669131, -0.681998, -0.694658, -0.707107, -0.719340, -0.731354, -0.743145, -0.754710,
-0.766044, -0.777146, -0.788011, -0.798636, -0.809017, -0.819152, -0.829038, -0.838671, -0.848048, -0.857167,
-0.866025, -0.874620, -0.882948, -0.891007, -0.898794, -0.906308, -0.913545, -0.920505, -0.927184, -0.933580,
-0.939693, -0.945519, -0.951057, -0.956305, -0.961262, -0.965926, -0.970296, -0.974370, -0.978148, -0.981627,
-0.984808, -0.987688, -0.990268, -0.992546, -0.994522, -0.996195, -0.997564, -0.998630, -0.999391, -0.999848,
-1.000000, -0.999848, -0.999391, -0.998630, -0.997564, -0.996195, -0.994522, -0.992546, -0.990268, -0.987688,
-0.984808, -0.981627, -0.978148, -0.974370, -0.970296, -0.965926, -0.961262, -0.956305, -0.951057, -0.945519,
-0.939693, -0.933580, -0.927184, -0.920505, -0.913545, -0.906308, -0.898794, -0.891007, -0.882948, -0.874620,
-0.866025, -0.857167, -0.848048, -0.838671, -0.829038, -0.819152, -0.809017, -0.798636, -0.788011, -0.777146,
-0.766044, -0.754710, -0.743145, -0.731354, -0.719340, -0.707107, -0.694658, -0.681998, -0.669131, -0.656059,
-0.642788, -0.629320, -0.615661, -0.601815, -0.587785, -0.573576, -0.559193, -0.544639, -0.529919, -0.515038,
-0.500000, -0.484810, -0.469472, -0.453990, -0.438371, -0.422618, -0.406737, -0.390731, -0.374607, -0.358368,
-0.342020, -0.325568, -0.309017, -0.292372, -0.275637, -0.258819, -0.241922, -0.224951, -0.207912, -0.190809,
-0.173648, -0.156434, -0.139173, -0.121869, -0.104528, -0.087156, -0.069756, -0.052336, -0.034899, -0.017452,
-0.000000, 0.017452, 0.034899, 0.052336, 0.069756, 0.087156, 0.104528, 0.121869, 0.139173, 0.156434,
0.173648, 0.190809, 0.207912, 0.224951, 0.241922, 0.258819, 0.275637, 0.292372, 0.309017, 0.325568,
0.342020, 0.358368, 0.374607, 0.390731, 0.406737, 0.422618, 0.438371, 0.453990, 0.469472, 0.484810,
0.500000, 0.515038, 0.529919, 0.544639, 0.559193, 0.573576, 0.587785, 0.601815, 0.615661, 0.629320,
0.642788, 0.656059, 0.669131, 0.681998, 0.694658, 0.707107, 0.719340, 0.731354, 0.743145, 0.754710,
0.766044, 0.777146, 0.788011, 0.798636, 0.809017, 0.819152, 0.829038, 0.838671, 0.848048, 0.857167,
0.866025, 0.874620, 0.882948, 0.891007, 0.898794, 0.906308, 0.913545, 0.920505, 0.927184, 0.933580,
0.939693, 0.945519, 0.951057, 0.956305, 0.961262, 0.965926, 0.970296, 0.974370, 0.978148, 0.981627,
0.984808, 0.987688, 0.990268, 0.992546, 0.994522, 0.996195, 0.997564, 0.998630, 0.999391, 0.999848 };

int ustc_Find_Circles_By_Difference(
	Mat colorImg,
	int min_radius,
	int max_radius,
	int min_center_dist,
	int min_radius_dist,
	int max_circle_diff,
	int* x,
	int* y,
	int* radius,
	int* circle_cnt,
	int max_circle);

int ustc_Find_Circles_By_Difference(Mat colorImg, int min_radius, int max_radius, int min_center_dist, int min_radius_dist, int max_circle_diff, int * x, int * y, int * radius, int * circle_cnt, int max_circle)
{
	uchar *img = (uchar *)colorImg.data;
	if (NULL == img)
	{
		cout << "the image is null!" << endl;
		return MY_FAIL;
	}

	int current_circle_num = 0;
	int img_row = colorImg.rows;
	int img_col = colorImg.cols;
	int channel = colorImg.channels();

	int reg_pos_y[MY_LENGTH];  
	int reg_pos_x[MY_LENGTH];  
	int reg_radius[MY_LENGTH];  
	float reg_diff[MY_LENGTH];  

	int* reg_diff_r = new int[img_row*img_col]();  
	int* reg_diff_g = new int[img_row*img_col]();  
	int* reg_diff_b = new int[img_row*img_col]();  


	for (int r = min_radius; r <= max_radius; r++)
	{
		
		for (int theta = 0; theta < 360; theta++)
		{
			int dx_out = (r + 5)*calculated_cos[theta];
			int dy_out = (r + 5)*calculated_sin[theta];
			int dx_in = (r - 5)*calculated_cos[theta];
			int dy_in = (r - 5)*calculated_sin[theta];
			for (int pos_y = r + 5; pos_y < img_row - r - 5; pos_y++)
			{
				for (int pos_x = r + 5; pos_x < img_col - r - 5; pos_x++)
				{
					int index = pos_y * img_col + pos_x;
					int index_out = channel * ((pos_y + dx_out) * img_col + (pos_x + dy_out));
					int index_in = channel * ((pos_y + dx_in) * img_col + (pos_x + dy_in));
					reg_diff_b[index] += (img[index_out] - img[index_in]);
					reg_diff_g[index] += (img[index_out + 1] - img[index_in + 1]);
					reg_diff_r[index] += (img[index_out + 2] - img[index_in + 2]);
				}
			}
		}

		
		for (int pos_y = r + 5; pos_y < img_row - r - 5; pos_y++)
		{
			for (int pos_x = r + 5; pos_x < img_col - r - 5; pos_x++)
			{
				int index = pos_y * img_col + pos_x;

				float diff_b = reg_diff_b[index] / 360.0f;
				diff_b = (diff_b > 0) ? diff_b : -diff_b;

				float diff_g = reg_diff_g[index] / 360.0f;
				diff_g = (diff_g > 0) ? diff_g : -diff_g;

				float diff_r = reg_diff_r[index] / 360.0f;
				diff_r = (diff_r > 0) ? diff_r : -diff_r;

				float diff = diff_b + diff_g + diff_r;

				if (diff_b >= max_circle_diff || diff_g >= max_circle_diff || diff_r >= max_circle_diff)
				{
					
					int i;
					for (i = 0; i < current_circle_num; i++)
					{
						int dist_x = reg_pos_y[i] - pos_y;
						int dist_y = reg_pos_x[i] - pos_x;
						int dist_radius = reg_radius[i] - r;
						if (dist_x*dist_x + dist_y*dist_y <= min_center_dist*min_center_dist && dist_radius*dist_radius <= min_radius_dist*min_radius_dist)
						{
							
							if (diff > reg_diff[i])
							{
								reg_pos_y[i] = pos_y;
								reg_pos_x[i] = pos_x;
								reg_radius[i] = r;
								reg_diff[i] = diff;
							}
							break;
						}
					}
					
					if (i == current_circle_num)
					{
						reg_pos_y[current_circle_num] = pos_y;
						reg_pos_x[current_circle_num] = pos_x;
						reg_radius[current_circle_num] = r;
						reg_diff[current_circle_num] = diff;
						current_circle_num++;
					}
				}
			}
		}

		 
		for (int i = 0; i < img_row; i++)
		{
			for (int j = 0; j < img_col; j++)
			{
				int index = i * img_col + j;
				reg_diff_b[index] = 0;
				reg_diff_g[index] = 0;
				reg_diff_r[index] = 0;
			}
		}
		
	}

	
	if (current_circle_num > max_circle) {
		for (int j = 1; j < current_circle_num; j++) {
			int temp_x = reg_pos_x[j];
			int temp_y = reg_pos_y[j];
			int temp_radius = reg_radius[j];
			int i = j - 1;
			while (i >= 0 && reg_radius[i] < temp_radius) {
				reg_pos_x[i + 1] = reg_pos_x[i];
				reg_pos_y[i + 1] = reg_pos_y[i];
				reg_radius[i + 1] = reg_radius[i];
				i = i - 1;
			}
			reg_pos_x[i + 1] = temp_x;
			reg_pos_y[i + 1] = temp_y;
			reg_radius[i + 1] = temp_radius;
		}
	}

	for (int i = 0; i < current_circle_num; i++)
	{
		y[i] = reg_pos_y[i];
		x[i] = reg_pos_x[i];
		radius[i] = reg_radius[i];
	}
	*circle_cnt = current_circle_num;

	return MY_OK;
}
